plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    // Mappings
    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings_version:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
    }

    // Neoforge
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury
    modImplementation("dev.architectury:architectury-neoforge:${rootProject.architectury_version}")

    // Debug Utils
    modImplementation("io.github.flemmli97:debugutils:${project.debugutils_version}-neoforge") {
        transitive = false
    }

    // Smart Brain Lib
    modImplementation("net.tslat.smartbrainlib:SmartBrainLib-neoforge-${project.minecraft_version}:${project.sbl_version}")

    // Yet Another Config Lib
    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}-neoforge")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
